Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> sequent
Rule 1     sequent -> expression SEQ expression
Rule 2     expression -> ATOM
Rule 3     expression -> expression AND expression
Rule 4     expression -> expression OR expression
Rule 5     expression -> LPAREN expression RPAREN

Terminals, with rules where they appear

AND                  : 3
ATOM                 : 2
LPAREN               : 5
OR                   : 4
RPAREN               : 5
SEQ                  : 1
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 3 3 4 4 5
sequent              : 0

Parsing method: LALR

state 0

    (0) S' -> . sequent
    (1) sequent -> . expression SEQ expression
    (2) expression -> . ATOM
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . LPAREN expression RPAREN

    ATOM            shift and go to state 3
    LPAREN          shift and go to state 4

    sequent                        shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> sequent .



state 2

    (1) sequent -> expression . SEQ expression
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression

    SEQ             shift and go to state 5
    AND             shift and go to state 6
    OR              shift and go to state 7


state 3

    (2) expression -> ATOM .

    SEQ             reduce using rule 2 (expression -> ATOM .)
    AND             reduce using rule 2 (expression -> ATOM .)
    OR              reduce using rule 2 (expression -> ATOM .)
    RPAREN          reduce using rule 2 (expression -> ATOM .)
    $end            reduce using rule 2 (expression -> ATOM .)


state 4

    (5) expression -> LPAREN . expression RPAREN
    (2) expression -> . ATOM
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . LPAREN expression RPAREN

    ATOM            shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 8

state 5

    (1) sequent -> expression SEQ . expression
    (2) expression -> . ATOM
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . LPAREN expression RPAREN

    ATOM            shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 9

state 6

    (3) expression -> expression AND . expression
    (2) expression -> . ATOM
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . LPAREN expression RPAREN

    ATOM            shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 10

state 7

    (4) expression -> expression OR . expression
    (2) expression -> . ATOM
    (3) expression -> . expression AND expression
    (4) expression -> . expression OR expression
    (5) expression -> . LPAREN expression RPAREN

    ATOM            shift and go to state 3
    LPAREN          shift and go to state 4

    expression                     shift and go to state 11

state 8

    (5) expression -> LPAREN expression . RPAREN
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression

    RPAREN          shift and go to state 12
    AND             shift and go to state 6
    OR              shift and go to state 7


state 9

    (1) sequent -> expression SEQ expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression

    $end            reduce using rule 1 (sequent -> expression SEQ expression .)
    AND             shift and go to state 6
    OR              shift and go to state 7


state 10

    (3) expression -> expression AND expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression

    SEQ             reduce using rule 3 (expression -> expression AND expression .)
    AND             reduce using rule 3 (expression -> expression AND expression .)
    OR              reduce using rule 3 (expression -> expression AND expression .)
    RPAREN          reduce using rule 3 (expression -> expression AND expression .)
    $end            reduce using rule 3 (expression -> expression AND expression .)

  ! AND             [ shift and go to state 6 ]
  ! OR              [ shift and go to state 7 ]


state 11

    (4) expression -> expression OR expression .
    (3) expression -> expression . AND expression
    (4) expression -> expression . OR expression

    SEQ             reduce using rule 4 (expression -> expression OR expression .)
    OR              reduce using rule 4 (expression -> expression OR expression .)
    RPAREN          reduce using rule 4 (expression -> expression OR expression .)
    $end            reduce using rule 4 (expression -> expression OR expression .)
    AND             shift and go to state 6

  ! AND             [ reduce using rule 4 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 7 ]


state 12

    (5) expression -> LPAREN expression RPAREN .

    SEQ             reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 5 (expression -> LPAREN expression RPAREN .)

